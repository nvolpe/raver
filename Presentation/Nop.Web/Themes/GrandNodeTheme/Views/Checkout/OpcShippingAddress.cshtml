@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;

<div class="checkout-data">
    @if (Model.AllowPickUpInStore)
        {
            <div class="section pickup-in-store">
                <p class="selector">
                    @{
                        var pickupInStoreName = T("Checkout.PickUpInStore").Text;
                        if (!String.IsNullOrEmpty(Model.PickUpInStoreFee))
                        {
                            pickupInStoreName = T("Checkout.PickUpInStoreAndFee", Model.PickUpInStoreFee).Text;
                        }
                    }
                    @*@Html.CheckBoxFor(x => x.PickUpInStore, new { @onclick = "Shipping.togglePickUpInStore(this)" })*@
                    <input type="checkbox" name="@Html.FieldIdFor(model => model.PickUpInStore)" id="@Html.FieldIdFor(model => model.PickUpInStore)" onclick="Shipping.togglePickUpInStore(this)" value="true">
                    <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@pickupInStoreName</label>
					<input name="@Html.FieldIdFor(model => model.PickUpInStore)" type="hidden" value="false">
                </p>
                <p class="description"><i>@T("Checkout.PickUpInStore.Description")</i></p>
            </div>
        }
    <div class="shipping-addresses input-field col s12 section" id="shipping-addresses-form">
        
        @Html.Widget("op_checkout_shipping_address_top")
        @if (Model.ExistingAddresses.Count > 0)
        {
            <div class="select-wrapper select-shipping-address">
                
                <select name="shipping_address_id" id="shipping-address-select" class="address-select" title="" onchange="Shipping.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        if (address.StreetAddressEnabled && !String.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (address.CityEnabled && !String.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.StateProvinceEnabled && !String.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !String.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !String.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                </select>
                <label for="shipping-address-select">@T("Checkout.SelectShippingAddressOrEnterNewOne")</label>
                
            </div>
        }
        @Html.Widget("op_checkout_shipping_address_middle")
        <div class="container section new-shipping-address" id="shipping-new-address-form">
            <div class="fieldset card-panel grey lighten-4 enter-address">
                @{
                    var validationSummary = Html.ValidationSummary(true);
                }
                @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                {
                    <div class="message-error">@validationSummary</div>
                }
                @{
                    var dataDictAddress = new ViewDataDictionary();
                    //Merge ModelState (required for validation)
                    dataDictAddress.ModelState.Merge(ViewData.ModelState);
                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                    @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                }
            </div>
        </div>
        @Html.Widget("op_checkout_shipping_address_bottom")
    </div>
</div>


